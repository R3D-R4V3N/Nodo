@* Input met spraakopname en verzenden *@
@inject IJSRuntime JS
@implements IAsyncDisposable

<form class="bg-white border-t border-neutral-200 px-3 py-2" @onsubmit="HandleSubmit">
    <div class="flex items-center gap-2">
        <input id="chat-input"
               type="text"
               placeholder="Typ je berichtâ€¦"
               class="flex-1 rounded-full bg-neutral-100 px-4 py-4 text-sm placeholder-neutral-500 outline-none focus:ring-2 focus:ring-blue-600"
               @bind="Value"
               @bind:event="oninput" />

        <button type="button"
                class="@VoiceButtonClasses"
                title="Spraakbericht opnemen"
                disabled="@(_isProcessing || !_canRecord)"
                @onclick="ToggleRecordingAsync">
            @if (_isProcessing)
            {
                <svg class="h-6 w-6 animate-spin text-current" xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="#ffffff" viewBox="0 0 256 256"><path d="M168,64v64a40,40,0,0,1-40,40h0a40,40,0,0,1-40-40V64a40,40,0,0,1,40-40h0A40,40,0,0,1,168,64Z" opacity="0.2"></path><path d="M128,176a48.05,48.05,0,0,0,48-48V64a48,48,0,0,0-96,0v64A48.05,48.05,0,0,0,128,176ZM96,64a32,32,0,0,1,64,0v64a32,32,0,0,1-64,0Zm40,143.6V240a8,8,0,0,1-16,0V207.6A80.11,80.11,0,0,1,48,128a8,8,0,0,1,16,0,64,64,0,0,0,128,0,8,8,0,0,1,16,0A80.11,80.11,0,0,1,136,207.6Z"></path></svg>
            }
            else if (_isRecording)
            {   
                <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="#ffffff" viewBox="0 0 256 256"><path d="M168,64v64a40,40,0,0,1-40,40h0a40,40,0,0,1-40-40V64a40,40,0,0,1,40-40h0A40,40,0,0,1,168,64Z" opacity="0.2"></path><path d="M128,176a48.05,48.05,0,0,0,48-48V64a48,48,0,0,0-96,0v64A48.05,48.05,0,0,0,128,176ZM96,64a32,32,0,0,1,64,0v64a32,32,0,0,1-64,0Zm40,143.6V240a8,8,0,0,1-16,0V207.6A80.11,80.11,0,0,1,48,128a8,8,0,0,1,16,0,64,64,0,0,0,128,0,8,8,0,0,1,16,0A80.11,80.11,0,0,1,136,207.6Z"></path></svg>
            }
            else
            {
                <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="#ffffff" viewBox="0 0 256 256"><path d="M168,64v64a40,40,0,0,1-40,40h0a40,40,0,0,1-40-40V64a40,40,0,0,1,40-40h0A40,40,0,0,1,168,64Z" opacity="0.2"></path><path d="M128,176a48.05,48.05,0,0,0,48-48V64a48,48,0,0,0-96,0v64A48.05,48.05,0,0,0,128,176ZM96,64a32,32,0,0,1,64,0v64a32,32,0,0,1-64,0Zm40,143.6V240a8,8,0,0,1-16,0V207.6A80.11,80.11,0,0,1,48,128a8,8,0,0,1,16,0,64,64,0,0,0,128,0,8,8,0,0,1,16,0A80.11,80.11,0,0,1,136,207.6Z"></path></svg>
            }
            <span class="sr-only">Spraakbericht opnemen</span>
        </button>

        <button type="submit"
                class="grid place-items-center h-12 w-12 rounded-xl bg-[#127646] hover:bg-green-800 text-white disabled:opacity-40 disabled:cursor-not-allowed"
                title="Verzenden"
                disabled="@string.IsNullOrWhiteSpace(Value)">
            <svg class="h-6 w-6" xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="#ffffff" viewBox="0 0 256 256"><path d="M227.91,134.86,59.93,231a8,8,0,0,1-11.44-9.67L80,128,48.49,34.72a8,8,0,0,1,11.44-9.67l168,95.85A8,8,0,0,1,227.91,134.86Z" opacity="0.2"></path><path d="M231.87,114l-168-95.89A16,16,0,0,0,40.92,37.34L71.55,128,40.92,218.67A16,16,0,0,0,56,240a16.15,16.15,0,0,0,7.93-2.1l167.92-96.05a16,16,0,0,0,.05-27.89ZM56,224a.56.56,0,0,0,0-.12L85.74,136H144a8,8,0,0,0,0-16H85.74L56.06,32.16A.46.46,0,0,0,56,32l168,95.83Z"></path></svg>
            <span class="sr-only">Verzenden</span>
        </button>
    </div>

    @if (!string.IsNullOrWhiteSpace(_errorMessage))
    {
        <p class="mt-2 text-xs text-red-600">@_errorMessage</p>
    }
</form>

@code {
    [Parameter] public string? Value { get; set; }
    [Parameter] public EventCallback<string?> ValueChanged { get; set; }
    [Parameter] public EventCallback<string> OnSend { get; set; }
    [Parameter] public EventCallback<RecordedAudio> OnSendVoice { get; set; }

    private IJSObjectReference? _module;
    private bool _isRecording;
    private bool _isProcessing;
    private bool _canRecord = true;
    private string? _errorMessage;

    private async Task HandleSubmit()
    {
        var text = Value?.Trim();
        if (!string.IsNullOrEmpty(text))
        {
            await OnSend.InvokeAsync(text);
            Value = string.Empty;
            await ValueChanged.InvokeAsync(Value);
        }
    }

    private async Task ToggleRecordingAsync()
    {
        if (_isProcessing)
        {
            return;
        }

        if (!_isRecording)
        {
            await StartRecordingAsync();
        }
        else
        {
            await CompleteRecordingAsync();
        }
    }

    private async Task StartRecordingAsync()
    {
        if (!OnSendVoice.HasDelegate)
        {
            _errorMessage = "Spraakberichten worden niet ondersteund.";
            StateHasChanged();
            return;
        }

        _errorMessage = null;

        try
        {
            await EnsureModuleAsync();
            await _module!.InvokeVoidAsync("startRecording");
            _isRecording = true;
        }
        catch (JSException ex)
        {
            Console.Error.WriteLine(ex);
            _errorMessage = "Kon de microfoon niet starten. Controleer je browserinstellingen.";
            _canRecord = false;
        }

        StateHasChanged();
    }

    private async Task CompleteRecordingAsync()
    {
        if (_module is null)
        {
            _isRecording = false;
            return;
        }

        _isProcessing = true;
        StateHasChanged();

        try
        {
            var audio = await _module.InvokeAsync<RecordedAudio?>("stopRecording");
            if (audio is not null && !string.IsNullOrWhiteSpace(audio.DataUrl))
            {
                _errorMessage = null;
                if (OnSendVoice.HasDelegate)
                {
                    await OnSendVoice.InvokeAsync(audio);
                }
            }
        }
        catch (JSException ex)
        {
            Console.Error.WriteLine(ex);
            _errorMessage = "Het opnemen van audio is mislukt.";
        }
        finally
        {
            _isRecording = false;
            _isProcessing = false;
            StateHasChanged();
        }
    }

    private async Task EnsureModuleAsync()
    {
        _module ??= await JS.InvokeAsync<IJSObjectReference>("import", "./js/voiceRecorder.js");
    }

    private string VoiceButtonClasses
    {
        get
        {
            var classes = new List<string>
            {
                "grid",
                "place-items-center",
                "h-12",
                "w-12",
                "rounded-xl",
                "transition",
                "text-white"
            };

            if (!_canRecord)
            {
                classes.AddRange(new[] { "bg-neutral-300", "text-neutral-500" });
            }
            else if (_isRecording)
            {
                classes.AddRange(new[] { "bg-red-600", "hover:bg-red-700", "animate-pulse" });
            }
            else
            {
                classes.AddRange(new[] { "bg-blue-700", "hover:bg-blue-800" });
            }

            if (_isProcessing)
            {
                classes.AddRange(new[] { "opacity-75", "cursor-wait" });
            }

            classes.Add("disabled:opacity-50");
            classes.Add("disabled:cursor-not-allowed");

            return string.Join(' ', classes);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_module is not null)
        {
            try
            {
                await _module.InvokeVoidAsync("disposeRecorder");
            }
            catch (JSException)
            {
                // ignore disposal exceptions
            }

            await _module.DisposeAsync();
        }
    }
}
