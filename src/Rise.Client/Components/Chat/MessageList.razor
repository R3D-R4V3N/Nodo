@using System.Globalization
@using Rise.Shared.Chat
@inject IJSRuntime JS

<section @ref="_scrollHost"
         class="flex-1 overflow-y-auto bg-neutral-100 px-4 py-5 space-y-2">
    @if (PinnedNotice is not null)
    {
        <div class="sticky top-0 z-40 -mx-1 mb-3">
            <div class="mx-auto max-w-md rounded-xl border border-red-500/40 bg-red-600/95 px-4 py-3 text-white shadow-lg backdrop-blur supports-[backdrop-filter]:bg-red-600/75">
                <div class="flex items-start gap-3">
                    <span class="inline-flex h-8 w-8 shrink-0 items-center justify-center rounded-full bg-white/15">
                        <svg class="h-4 w-4" viewBox="0 0 24 24" fill="none" aria-hidden="true">
                            <path d="M12 9v4m0 4h.01M10.29 3.86 1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0Z"
                                  stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                        </svg>
                    </span>
                    <div class="min-w-0 space-y-1">
                        <p class="text-sm font-semibold leading-5">Supervisor-alert actief</p>
                        <p class="text-xs leading-5 text-red-50/95">@PinnedNotice.Message</p>
                        <p class="text-[10px] uppercase tracking-wide text-red-100/70">
                            @GetPinnedNoticeCaption(PinnedNotice)
                        </p>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrWhiteSpace(TimestampText))
    {
        <p class="text-center text-[10px] sm:text-xs text-neutral-500">@TimestampText</p>
    }

    @foreach (var m in Messages)
    {
        <div class="space-y-1">
            @if (!string.IsNullOrWhiteSpace(m.SenderName))
            {
                <p class="text-[10px] uppercase tracking-wide text-neutral-500 @(m.IsOutgoing ? "text-right" : string.Empty)">@m.SenderName</p>
            }

            <MessageBubble Text="@m.Text"
                           IsOutgoing="@m.IsOutgoing"
                           AvatarUrl="@(m.IsOutgoing ? null : m.AvatarUrl)"
                           AudioUrl="@m.AudioUrl"
                           AudioDuration="@m.AudioDuration" />
        </div>
    }
</section>

@code {
    [Parameter] public IReadOnlyList<Message> Messages { get; set; } = Array.Empty<Message>();
    [Parameter] public string? TimestampText { get; set; } = "Nov 30, 2023, 9:41 AM";
    [Parameter] public SupervisorNotice? PinnedNotice { get; set; }

    private ElementReference _scrollHost;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // scrol elke render automatisch naar onder
        await JS.InvokeVoidAsync("scrollToBottom", _scrollHost);
    }

    private static string GetPinnedNoticeCaption(SupervisorNotice notice)
    {
        var culture = CultureInfo.GetCultureInfo("nl-BE");
        var timestamp = notice.Timestamp.ToString("dd MMM HH:mm", culture);

        if (string.IsNullOrWhiteSpace(notice.TriggeredByName))
        {
            return $"{timestamp}";
        }

        return $"{notice.TriggeredByName} â€¢ {timestamp}";
    }
}