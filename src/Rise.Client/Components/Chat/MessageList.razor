@inject IJSRuntime JS

<section @ref="_scrollHost"
         class="flex-1 overflow-y-auto bg-neutral-100 px-4 py-5 space-y-2">
    @if (!string.IsNullOrWhiteSpace(TimestampText))
    {
        <p class="text-center text-[10px] sm:text-xs text-neutral-500">@TimestampText</p>
    }

    @for (var i = 0; i < Messages.Count; i++)
    {
        var message = Messages[i];
        var previous = i > 0 ? Messages[i - 1] : null;
        var isContinuation = ShouldGroupWithPrevious(message, previous);
        var showSender = !message.IsOutgoing
            && !string.IsNullOrWhiteSpace(message.SenderName)
            && !isContinuation;
        var avatarUrl = message.IsOutgoing ? null : (isContinuation ? null : message.AvatarUrl);

        <div class="@(isContinuation ? "space-y-0.5" : "space-y-1")">
            @if (showSender)
            {
                <p class="text-[10px] uppercase tracking-wide text-neutral-500">@message.SenderName</p>
            }

            <MessageBubble Text="@message.Text"
                           IsOutgoing="@message.IsOutgoing"
                           AvatarUrl="@avatarUrl"
                           AudioUrl="@message.AudioUrl"
                           AudioDuration="@message.AudioDuration" />
        </div>
    }
</section>

@code {
    [Parameter] public IReadOnlyList<Message> Messages { get; set; } = Array.Empty<Message>();
    [Parameter] public string? TimestampText { get; set; } = "Nov 30, 2023, 9:41 AM";

    private ElementReference _scrollHost;

    private static readonly TimeSpan MessageGroupingWindow = TimeSpan.FromMinutes(2);

    private static bool ShouldGroupWithPrevious(Message current, Message? previous)
    {
        if (previous is null)
        {
            return false;
        }

        if (previous.IsOutgoing != current.IsOutgoing)
        {
            return false;
        }

        if (!current.IsOutgoing)
        {
            if (!string.Equals(previous.SenderName, current.SenderName, System.StringComparison.Ordinal))
            {
                return false;
            }
        }

        if (previous.Timestamp is null || current.Timestamp is null)
        {
            return false;
        }

        var difference = current.Timestamp.Value - previous.Timestamp.Value;
        if (difference < TimeSpan.Zero)
        {
            difference = difference.Negate();
        }

        return difference <= MessageGroupingWindow;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // scrol elke render automatisch naar onder
        await JS.InvokeVoidAsync("scrollToBottom", _scrollHost);
    }
}