@page "/friends"
@using Rise.Client.Shared
@layout ChatLayout
<FriendsHeader OnBack="GoBack" />

<section class="bg-neutral-100 px-4 pt-4 pb-2">
    <FriendsTabs Selected="@_selected" OnChange="ChangeTab" />
    <FriendSearch @bind-Value="Query" />
</section>

@if (_isLoading)
{
    <div class="px-4 py-6 text-sm text-neutral-500">Vrienden laden...</div>
}
else if (!string.IsNullOrWhiteSpace(_error))
{
    <div class="mx-4 my-3 rounded-xl bg-red-50 px-4 py-3 text-sm text-red-600">@_error</div>
}
else if (_filtered.Count == 0)
{
    <div class="px-4 py-6 text-sm text-neutral-500">Geen resultaten voor deze selectie.</div>
}
else
{
    <FriendList Items="@_filtered"
                OnAccept="AcceptRequest"
                OnReject="RejectRequest"
                OnAdd="AddFriend"
                OnOpenChat="OpenChat"
                OnRemove="RemoveFriend" />
}

@code {
    private FriendState _selected = FriendState.All;
    private string? _query;
    private readonly List<FriendDto> _all = [];
    private List<FriendDto> _filtered = [];
    private bool _isLoading = true;
    private string? _error;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        _isLoading = true;
        _error = null;
        StateHasChanged();

        var result = await FriendApi.GetAsync();
        if (result.IsSuccess && result.Value is not null)
        {
            _all.Clear();

            foreach (var request in result.Value.Requests)
            {
                request.State = FriendState.Requests;
                _all.Add(request);
            }

            foreach (var friend in result.Value.Friends)
            {
                friend.State = FriendState.All;
                _all.Add(friend);
            }

            foreach (var suggestion in result.Value.Suggestions)
            {
                suggestion.State = FriendState.Add;
                _all.Add(suggestion);
            }

            _error = null;
        }
        else
        {
            _all.Clear();
            _error = result.Errors.Any()
                ? string.Join(" ", result.Errors)
                : result.Status == ResultStatus.Unauthorized
                    ? "Meld je aan om je vriendenlijst te bekijken."
                    : "Kon vrienden niet laden.";
        }

        _isLoading = false;
        ApplyFilter();
        StateHasChanged();
    }

    private void ChangeTab(FriendState tab)
    {
        _selected = tab;
        ApplyFilter();
        StateHasChanged();
    }

    private void ApplyFilter()
    {
        IEnumerable<FriendDto> query = _all;

        if (_selected != FriendState.All)
            query = query.Where(f => f.State == _selected);

        if (!string.IsNullOrWhiteSpace(_query))
            query = query.Where(f => f.Name.Contains(_query, StringComparison.OrdinalIgnoreCase));

        _filtered = query.ToList();
    }

    private async Task AcceptRequest(FriendDto friend)
    {
        var result = await FriendApi.AddAsync(friend.Id);
        if (result.IsSuccess)
        {
            await LoadAsync();
        }
        else
        {
            _error = result.Errors.Any() ? string.Join(" ", result.Errors) : "Kon vriendverzoek niet accepteren.";
            StateHasChanged();
        }
    }

    private async Task RejectRequest(FriendDto friend)
    {
        var result = await FriendApi.RemoveAsync(friend.Id);
        if (result.IsSuccess)
        {
            await LoadAsync();
        }
        else
        {
            _error = result.Errors.Any() ? string.Join(" ", result.Errors) : "Kon vriendverzoek niet weigeren.";
            StateHasChanged();
        }
    }

    private async Task AddFriend(FriendDto friend)
    {
        var result = await FriendApi.AddAsync(friend.Id);
        if (result.IsSuccess)
        {
            await LoadAsync();
        }
        else
        {
            _error = result.Errors.Any() ? string.Join(" ", result.Errors) : "Kon vriend niet toevoegen.";
            StateHasChanged();
        }
    }

    private void OpenChat(FriendDto friend)
        => Nav.NavigateTo("/chat");

    private async Task RemoveFriend(FriendDto friend)
    {
        var result = await FriendApi.RemoveAsync(friend.Id);
        if (result.IsSuccess)
        {
            await LoadAsync();
        }
        else
        {
            _error = result.Errors.Any() ? string.Join(" ", result.Errors) : "Kon vriend niet verwijderen.";
            StateHasChanged();
        }
    }

    private void GoBack()
    {
        Nav.NavigateTo("/");
    }

    private string? Query
    {
        get => _query;
        set
        {
            _query = value;
            ApplyFilter();
            StateHasChanged();
        }
    }

    [Inject] private NavigationManager Nav { get; set; } = default!;
    [Inject] private IFriendApi FriendApi { get; set; } = default!;
}
