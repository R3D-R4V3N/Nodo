@page "/chat/{ChatId:int}"
@attribute [Authorize]
@using System.Globalization
@using System.Linq
@using System.Security.Claims
@using System.Threading
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.JSInterop
@using Rise.Client.Chats
@using Rise.Client.Components.Chat
@using Rise.Shared.Chat
@using Rise.Shared.Chats
@using Rise.Shared.Assets
@layout EmptyLayout
@implements IAsyncDisposable
@inject IChatService ChatService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="flex flex-col h-screen max-h-screen overflow-hidden bg-neutral-100 text-neutral-900">

    <!-- Header -->
    <ChatHeader DisplayName="@GetChatTitle()"
                AvatarUrl="@GetAvatarUrl()"
                StatusText="@GetStatusText()"
                OnBack="NavigateBack"
                OnAlert="TriggerAlert" />

    @if (_isLoading)
    {
        <div class="flex-1 grid place-items-center">
            <p class="text-sm text-neutral-500">Gesprek wordt geladenâ€¦</p>
        </div>
    }
    else if (!string.IsNullOrWhiteSpace(_loadError))
    {
        <div class="flex-1 grid place-items-center px-6 text-center">
            <div class="space-y-2">
                <p class="text-sm text-red-600">@_loadError</p>
                <button class="text-xs text-[#127646] underline" @onclick="NavigateBack">
                    Ga terug naar overzicht
                </button>
            </div>
        </div>
    }
    else if (_chat is null)
    {
        <div class="flex-1 grid place-items-center">
            <p class="text-sm text-neutral-500">Dit gesprek kon niet gevonden worden.</p>
        </div>
    }
    else
    {
        @if (!string.IsNullOrWhiteSpace(_connectionError))
        {
            <div class="px-6 py-2 text-xs text-amber-700 bg-amber-50 border-b border-amber-200">
                @_connectionError
            </div>
        }

        <!-- Scrollable messages -->
        <div class="flex-1 overflow-y-auto px-3 no-scrollbar" style="@GetMessageHostPaddingStyle()" @ref="_messagesHost">
            <MessageList Messages="_messages" TimestampText="@GetConversationDateLabel()" />
        </div>

        <!-- Fixed input bar -->
        <div class="fixed bottom-0 left-0 right-0 bg-white" @ref="_footerHost">
            <div class="mx-auto px-3">
                <SuggestionChips Suggestions="_suggestions" OnPick="ApplySuggestion" />
                <ChatInput @bind-Value="_draft"
                           OnSend="SendMessageAsync"
                           OnSendVoice="HandleVoiceMessageAsync" />
                @if (!string.IsNullOrWhiteSpace(_errorMessage))
                {
                    <p class="px-2 pb-3 text-xs text-red-600">@_errorMessage</p>
                }
            </div>
        </div>
    }
</div>

<style>
  html, body {
      height: 100%;
      overflow-x: hidden;
  }
  .no-scrollbar::-webkit-scrollbar {
      display: none;
  }
  .no-scrollbar {
      -ms-overflow-style: none;
      scrollbar-width: none;
  }
</style>

@code {
    [Parameter] public int ChatId { get; set; }

    private ChatDto.Index? _chat;
    private readonly List<Message> _messages = new();
    private readonly HashSet<int> _messageIds = new();
    private readonly string[] _suggestions =
    {
        "Hey! Hoe gaat het vandaag?",
        "Wat heb je gedaan vandaag?",
        "Zullen we later bellen?",
        "Heb je plannen voor dit weekend?",
        "Ik ben trots op je! ðŸ’ª",
        "Wil je samen een spelletje spelen?"
    };

    private readonly SemaphoreSlim _hubConnectionLock = new(1, 1);
    private HubConnection? _hubConnection;
    private int? _joinedChatId;
    private string? _currentAccountId;
    private string? _currentUserName;
    private string? _draft = string.Empty;
    private string? _errorMessage;
    private string? _connectionError;
    private string? _loadError;
    private bool _isLoading = true;
    private bool _isSending;
    private bool _shouldScrollToBottom;
    private ElementReference _messagesHost;
    private ElementReference _footerHost;
    private double _footerHeight = 200;
    private bool _footerMeasurementPending = true;
    private const double FooterPaddingBuffer = 24;

    protected override async Task OnParametersSetAsync()
    {
        _loadError = null;
        _errorMessage = null;
        ScheduleFooterMeasurement();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user?.Identity?.IsAuthenticated != true)
        {
            NavigationManager.NavigateTo("/login", true);
            _isLoading = false;
            return;
        }

        _currentAccountId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        _currentUserName = user.Identity?.Name;

        _isLoading = true;
        var result = await ChatService.GetByIdAsync(ChatId);

        if (result.IsSuccess && result.Value is not null)
        {
            _chat = result.Value;
            _messages.Clear();
            _messages.AddRange(_chat.messages
                .OrderBy(m => m.Timestamp)
                .Select(MapToMessage));

            _messageIds.Clear();
            foreach (var message in _chat.messages)
            {
                _messageIds.Add(message.Id);
            }
        }
        else
        {
            _chat = null;
            _messages.Clear();
            _messageIds.Clear();
            _loadError = result.Errors.FirstOrDefault() ?? "Het gesprek kon niet geladen worden.";
        }

        _isLoading = false;
        _shouldScrollToBottom = true;
        ScheduleFooterMeasurement();

        await EnsureHubConnectionAsync();
    }

    private async Task SendMessageAsync(string text)
    {
        if (_chat is null || _isSending || string.IsNullOrWhiteSpace(text))
        {
            return;
        }

        _isSending = true;
        _errorMessage = null;
        ScheduleFooterMeasurement();

        try
        {
            var request = new ChatRequest.CreateMessage
            {
                ChatId = _chat.chatId,
                Content = text
            };

            var result = await ChatService.CreateMessageAsync(request);

            if (!result.IsSuccess || result.Value is null)
            {
                _errorMessage = result.Errors.FirstOrDefault() ?? "Het bericht kon niet verzonden worden.";
                ScheduleFooterMeasurement();
                return;
            }

            TryAddMessage(result.Value);
        }
        finally
        {
            _isSending = false;
            StateHasChanged();
        }
    }

    private Task ApplySuggestion(string text)
    {
        _draft = text;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task HandleVoiceMessageAsync(RecordedAudio audio)
    {
        if (_chat is null || _isSending)
        {
            return;
        }

        _isSending = true;
        _errorMessage = null;
        ScheduleFooterMeasurement();

        try
        {
            var request = new ChatRequest.CreateMessage
            {
                ChatId = _chat.chatId,
                AudioDataUrl = audio.DataUrl,
                AudioDurationSeconds = audio.DurationSeconds
            };

            var result = await ChatService.CreateMessageAsync(request);

            if (!result.IsSuccess || result.Value is null)
            {
                var validationMessage = result.ValidationErrors.FirstOrDefault()?.ErrorMessage;
                _errorMessage = validationMessage
                    ?? result.Errors.FirstOrDefault()
                    ?? "Het spraakbericht kon niet verzonden worden.";
                ScheduleFooterMeasurement();
                return;
            }

            TryAddMessage(result.Value);
        }
        finally
        {
            _isSending = false;
            StateHasChanged();
        }
    }

    private async Task EnsureHubConnectionAsync()
    {
        await _hubConnectionLock.WaitAsync();
        try
        {
            if (_hubConnection is null)
            {
                _hubConnection = new HubConnectionBuilder()
                    .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
                    .WithAutomaticReconnect()
                    .Build();

                _hubConnection.On<MessageDto>("MessageCreated", dto =>
                    InvokeAsync(() => ProcessIncomingMessage(dto)));

                _hubConnection.Reconnecting += error => InvokeAsync(() =>
                {
                    _connectionError = "Realtime verbinding wordt hersteldâ€¦";
                    StateHasChanged();
                });

                _hubConnection.Reconnected += _ => InvokeAsync(async () =>
                {
                    _connectionError = null;
                    await JoinCurrentChatAfterReconnectAsync();
                    StateHasChanged();
                });

                _hubConnection.Closed += error => InvokeAsync(() =>
                {
                    _joinedChatId = null;
                    _connectionError = "Realtime verbinding werd verbroken. Vernieuw de pagina om opnieuw te verbinden.";
                    StateHasChanged();
                });
            }

            if (_hubConnection.State == HubConnectionState.Disconnected)
            {
                await _hubConnection.StartAsync();
            }

            if (_hubConnection.State != HubConnectionState.Connected)
            {
                return;
            }

            await JoinCurrentChatCoreAsync();
        }
        catch (Exception ex)
        {
            _connectionError = $"Realtime verbinding mislukt: {ex.Message}";
        }
        finally
        {
            _hubConnectionLock.Release();
        }
    }

    private void ProcessIncomingMessage(MessageDto dto)
    {
        if (_chat is null || dto.ChatId != _chat.chatId)
        {
            return;
        }

        if (TryAddMessage(dto))
        {
            StateHasChanged();
        }
    }

    private async Task JoinCurrentChatAfterReconnectAsync()
    {
        await _hubConnectionLock.WaitAsync();
        try
        {
            if (_hubConnection?.State == HubConnectionState.Connected)
            {
                await JoinCurrentChatCoreAsync();
            }
        }
        catch (Exception ex)
        {
            _connectionError = $"Realtime verbinding mislukt: {ex.Message}";
        }
        finally
        {
            _hubConnectionLock.Release();
        }
    }

    private async Task JoinCurrentChatCoreAsync()
    {
        if (_hubConnection is null)
        {
            return;
        }

        if (_chat is null)
        {
            if (_joinedChatId is int previousId)
            {
                await _hubConnection.SendAsync("LeaveChat", previousId);
                _joinedChatId = null;
            }

            return;
        }

        if (_joinedChatId == _chat.chatId)
        {
            return;
        }

        if (_joinedChatId is int oldChatId)
        {
            await _hubConnection.SendAsync("LeaveChat", oldChatId);
        }

        await _hubConnection.SendAsync("JoinChat", _chat.chatId);
        _joinedChatId = _chat.chatId;
        _connectionError = null;
    }

    private bool TryAddMessage(MessageDto dto)
    {
        if (_chat is null)
        {
            return false;
        }

        if (!_messageIds.Add(dto.Id))
        {
            return false;
        }

        _chat.messages.Add(dto);
        _chat.messages = _chat.messages
            .OrderBy(m => m.Timestamp)
            .ToList();

        var mapped = MapToMessage(dto);
        _messages.Add(mapped);
        _messages.Sort((a, b) => Nullable.Compare(a.Timestamp, b.Timestamp));
        _shouldScrollToBottom = true;

        return true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (_footerMeasurementPending)
        {
            _footerMeasurementPending = false;

            try
            {
                var measuredHeight = await JSRuntime.InvokeAsync<double>("measureElementHeight", _footerHost);
                if (!double.IsNaN(measuredHeight)
                    && !double.IsInfinity(measuredHeight)
                    && measuredHeight > 0
                    && Math.Abs(measuredHeight - _footerHeight) > 1)
                {
                    _footerHeight = measuredHeight;
                    _shouldScrollToBottom = true;
                    StateHasChanged();
                    return;
                }
            }
            catch (JSDisconnectedException)
            {
                // Ignore when JS runtime is no longer available.
            }
        }

        if (_shouldScrollToBottom)
        {
            _shouldScrollToBottom = false;

            try
            {
                await JSRuntime.InvokeVoidAsync("scrollToBottom", _messagesHost, true);
            }
            catch (JSDisconnectedException)
            {
                // Ignore: JS runtime no longer available (e.g., during prerender or disposal).
            }
        }
    }

    private Message MapToMessage(MessageDto dto)
    {
        var isOutgoing = !string.IsNullOrWhiteSpace(_currentAccountId)
            && string.Equals(dto.SenderAccountId, _currentAccountId, StringComparison.Ordinal);

        var audioUrl = string.IsNullOrWhiteSpace(dto.AudioDataUrl)
            ? null
            : dto.AudioDataUrl;

        TimeSpan? audioDuration = dto.AudioDurationSeconds.HasValue
            ? TimeSpan.FromSeconds(dto.AudioDurationSeconds.Value)
            : null;

        var avatarUrl = isOutgoing
            ? null
            : DefaultImages.GetProfile(GetAvatarKey(dto));

        return new Message(
            dto.Id.ToString(CultureInfo.InvariantCulture),
            dto.Content ?? string.Empty,
            isOutgoing,
            AvatarUrl: avatarUrl,
            Timestamp: dto.Timestamp,
            AudioUrl: audioUrl,
            AudioDuration: audioDuration,
            SenderName: dto.SenderName);
    }

    private string GetChatTitle()
    {
        if (_chat is null)
        {
            return _currentUserName ?? "Chat";
        }

        var participantNames = _chat.messages
            .Where(m => !string.IsNullOrWhiteSpace(m.SenderName)
                        && !string.Equals(m.SenderAccountId, _currentAccountId, StringComparison.Ordinal))
            .Select(m => m.SenderName)
            .Distinct(StringComparer.OrdinalIgnoreCase)
            .ToList();

        if (participantNames.Count == 0)
        {
            return !string.IsNullOrWhiteSpace(_currentUserName)
                ? _currentUserName!
                : $"Chat {_chat.chatId}";
        }

        return participantNames.Count == 1
            ? participantNames[0]
            : string.Join(", ", participantNames);
    }

    private string GetAvatarUrl()
    {
        var participant = _messages
            .Where(m => !m.IsOutgoing)
            .OrderBy(m => m.Timestamp)
            .FirstOrDefault();

        if (participant is not null && !string.IsNullOrWhiteSpace(participant.AvatarUrl))
        {
            return participant.AvatarUrl;
        }

        if (!string.IsNullOrWhiteSpace(_currentAccountId))
        {
            return DefaultImages.GetProfile(_currentAccountId);
        }

        return DefaultImages.Profile;
    }

    private static string GetAvatarKey(MessageDto dto)
    {
        if (!string.IsNullOrWhiteSpace(dto.SenderAccountId))
        {
            return dto.SenderAccountId;
        }

        if (dto.SenderId != 0)
        {
            return dto.SenderId.ToString(CultureInfo.InvariantCulture);
        }

        return dto.SenderName ?? string.Empty;
    }

    private string GetStatusText()
    {
        var lastMessage = _messages.LastOrDefault();
        if (lastMessage?.Timestamp is DateTimeOffset timestamp)
        {
            return $"Laatste bericht {timestamp.ToLocalTime():HH:mm}";
        }

        return "Online";
    }

    private string GetConversationDateLabel()
    {
        if (_chat is null)
        {
            return string.Empty;
        }

        var first = _chat.messages
            .OrderBy(m => m.Timestamp)
            .FirstOrDefault();

        return first?.Timestamp.ToLocalTime().ToString("d MMM yyyy", CultureInfo.GetCultureInfo("nl-BE")) ?? string.Empty;
    }

    private Task NavigateBack()
    {
        NavigationManager.NavigateTo("/homepage");
        return Task.CompletedTask;
    }

    private Task TriggerAlert()
    {
        // TODO: Hook up with actual alert functionality.
        return Task.CompletedTask;
    }

    private string GetMessageHostPaddingStyle()
    {
        var padding = Math.Max(0, Math.Ceiling(_footerHeight + FooterPaddingBuffer));
        return $"padding-bottom: {padding}px;";
    }

    private void ScheduleFooterMeasurement()
    {
        _footerMeasurementPending = true;
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }

        _hubConnectionLock.Dispose();
    }
}
