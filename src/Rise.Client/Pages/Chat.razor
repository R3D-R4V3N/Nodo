@page "/chat/{ChatId:int}"
@attribute [Authorize]
@using System.Globalization
@using System.Linq
@using System.Security.Claims
@using System.Threading
@using Microsoft.AspNetCore.SignalR.Client
@using Rise.Client.Chats
@using Rise.Client.Components.Chat
@using Rise.Shared.Chat
@using Rise.Shared.Chats
@layout EmptyLayout
@implements IAsyncDisposable
@inject IChatService ChatService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<div class="flex flex-col h-screen max-h-screen overflow-hidden bg-neutral-100 text-neutral-900">

    <!-- Header -->
    <ChatHeader DisplayName="@GetChatTitle()"
                AvatarUrl="@GetAvatarUrl()"
                StatusText="@GetStatusText()"
                OnBack="NavigateBack"
                OnAlert="TriggerAlert" />

    @if (_isLoading)
    {
        <div class="flex-1 grid place-items-center">
            <p class="text-sm text-neutral-500">Gesprek wordt geladenâ€¦</p>
        </div>
    }
    else if (!string.IsNullOrWhiteSpace(_loadError))
    {
        <div class="flex-1 grid place-items-center px-6 text-center">
            <div class="space-y-2">
                <p class="text-sm text-red-600">@_loadError</p>
                <button class="text-xs text-[#127646] underline" @onclick="NavigateBack">
                    Ga terug naar overzicht
                </button>
            </div>
        </div>
    }
    else if (_chat is null)
    {
        <div class="flex-1 grid place-items-center">
            <p class="text-sm text-neutral-500">Dit gesprek kon niet gevonden worden.</p>
        </div>
    }
    else
    {
        @if (!string.IsNullOrWhiteSpace(_connectionError))
        {
            <div class="px-6 py-2 text-xs text-amber-700 bg-amber-50 border-b border-amber-200">
                @_connectionError
            </div>
        }

        @if (!string.IsNullOrWhiteSpace(_alertError))
        {
            <div class="px-6 py-2 text-xs text-red-700 bg-red-50 border-y border-red-200">
                @_alertError
            </div>
        }

        <!-- Scrollable messages -->
        <div class="flex-1 overflow-y-auto px-3 pb-24 no-scrollbar">
            <MessageList Messages="_messages" TimestampText="@GetConversationDateLabel()">
                @if (_alertStatus?.IsActive == true)
                {
                    <div class="sticky top-3 z-20 space-y-2">
                        <span class="inline-flex items-center gap-2 text-[10px] font-semibold uppercase tracking-[0.2em] text-red-700">
                            <svg class="h-3 w-3" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20" aria-hidden="true">
                                <path d="M9.401.598a1 1 0 0 1 1.198 0l8 6A1 1 0 0 1 19 8H1a1 1 0 0 1-.598-1.402l8-6Z" />
                            </svg>
                            Vastgezet bericht
                        </span>
                        <div class="flex items-start gap-3 p-4 text-sm text-red-800 rounded-lg bg-red-50 border border-red-200 shadow-sm" role="alert">
                            <svg class="shrink-0 inline w-5 h-5 mt-1" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20">
                                <path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5ZM9.5 4a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM12 15H8a1 1 0 0 1 0-2h1v-3H8a1 1 0 0 1 0-2h2a1 1 0 0 1 1 1v4h1a1 1 0 0 1 0 2Z" />
                            </svg>
                            <div>
                                <p class="font-semibold">Supervisor kijkt live mee</p>
                                <p class="mt-1 text-xs leading-relaxed text-red-700">
                                    Een supervisor volgt dit gesprek in realtime. Deel alleen informatie die strikt noodzakelijk is.
                                </p>
                                @{ var alertMetaText = GetAlertMetaText(); }
                                @if (!string.IsNullOrWhiteSpace(alertMetaText))
                                {
                                    <p class="mt-2 text-[11px] text-red-600">@alertMetaText</p>
                                }
                            </div>
                        </div>
                    </div>
                }
            </MessageList>
        </div>

        <!-- Fixed input bar -->
        <div class="fixed bottom-0 left-0 right-0 bg-white">
            <div class="mx-auto px-3">
                <SuggestionChips Suggestions="_suggestions" OnPick="ApplySuggestion" />
                <ChatInput @bind-Value="_draft"
                           OnSend="SendMessageAsync"
                           OnSendVoice="HandleVoiceMessageAsync" />
                @if (!string.IsNullOrWhiteSpace(_errorMessage))
                {
                    <p class="px-2 pb-3 text-xs text-red-600">@_errorMessage</p>
                }
            </div>
        </div>
    }
</div>

<style>
  html, body {
      height: 100%;
      overflow-x: hidden;
  }
  .no-scrollbar::-webkit-scrollbar {
      display: none;
  }
  .no-scrollbar {
      -ms-overflow-style: none;
      scrollbar-width: none;
  }
</style>

@code {
    [Parameter] public int ChatId { get; set; }

    private ChatDto.Index? _chat;
    private readonly List<Message> _messages = new();
    private readonly HashSet<int> _messageIds = new();
    private AlertStatusDto? _alertStatus;
    private readonly string[] _suggestions =
    {
        "Hey! Hoe gaat het vandaag?",
        "Wat heb je gedaan vandaag?",
        "Zullen we later bellen?",
        "Heb je plannen voor dit weekend?",
        "Ik ben trots op je! ðŸ’ª",
        "Wil je samen een spelletje spelen?"
    };

    private readonly SemaphoreSlim _hubConnectionLock = new(1, 1);
    private HubConnection? _hubConnection;
    private int? _joinedChatId;
    private string? _currentAccountId;
    private string? _currentUserName;
    private string? _draft = string.Empty;
    private string? _errorMessage;
    private string? _connectionError;
    private string? _alertError;
    private string? _loadError;
    private bool _isLoading = true;
    private bool _isSending;
    private bool _isAlertRequestPending;

    protected override async Task OnParametersSetAsync()
    {
        _loadError = null;
        _errorMessage = null;
        _alertError = null;
        _alertStatus = null;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user?.Identity?.IsAuthenticated != true)
        {
            NavigationManager.NavigateTo("/login", true);
            _isLoading = false;
            return;
        }

        _currentAccountId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        _currentUserName = user.Identity?.Name;

        _isLoading = true;
        var result = await ChatService.GetByIdAsync(ChatId);

        if (result.IsSuccess && result.Value is not null)
        {
            _chat = result.Value;
            _messages.Clear();
            _messages.AddRange(_chat.messages
                .OrderBy(m => m.Timestamp)
                .Select(MapToMessage));

            _messageIds.Clear();
            foreach (var message in _chat.messages)
            {
                _messageIds.Add(message.Id);
            }
        }
        else
        {
            _chat = null;
            _messages.Clear();
            _messageIds.Clear();
            _alertStatus = null;
            _loadError = result.Errors.FirstOrDefault() ?? "Het gesprek kon niet geladen worden.";
        }

        _isLoading = false;

        await EnsureHubConnectionAsync();
    }

    private async Task SendMessageAsync(string text)
    {
        if (_chat is null || _isSending || string.IsNullOrWhiteSpace(text))
        {
            return;
        }

        _isSending = true;
        _errorMessage = null;

        try
        {
            var request = new ChatRequest.CreateMessage
            {
                ChatId = _chat.chatId,
                Content = text
            };

            var result = await ChatService.CreateMessageAsync(request);

            if (!result.IsSuccess || result.Value is null)
            {
                _errorMessage = result.Errors.FirstOrDefault() ?? "Het bericht kon niet verzonden worden.";
                return;
            }

            TryAddMessage(result.Value);
        }
        finally
        {
            _isSending = false;
            StateHasChanged();
        }
    }

    private Task ApplySuggestion(string text)
    {
        _draft = text;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task HandleVoiceMessageAsync(RecordedAudio audio)
    {
        _errorMessage = "Spraakberichten worden nog niet ondersteund.";
        StateHasChanged();
        return Task.CompletedTask;
    }

    private async Task EnsureHubConnectionAsync()
    {
        await _hubConnectionLock.WaitAsync();
        try
        {
            if (_hubConnection is null)
            {
                _hubConnection = new HubConnectionBuilder()
                    .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
                    .WithAutomaticReconnect()
                    .Build();

                _hubConnection.On<MessageDto>("MessageCreated", dto =>
                    InvokeAsync(() => ProcessIncomingMessage(dto)));

                _hubConnection.On<AlertStatusDto>("AlertStateChanged", dto =>
                    InvokeAsync(() => HandleAlertStateChanged(dto)));

                _hubConnection.Reconnecting += error => InvokeAsync(() =>
                {
                    _connectionError = "Realtime verbinding wordt hersteldâ€¦";
                    StateHasChanged();
                });

                _hubConnection.Reconnected += _ => InvokeAsync(async () =>
                {
                    _connectionError = null;
                    await JoinCurrentChatAfterReconnectAsync();
                    StateHasChanged();
                });

                _hubConnection.Closed += error => InvokeAsync(() =>
                {
                    _joinedChatId = null;
                    _connectionError = "Realtime verbinding werd verbroken. Vernieuw de pagina om opnieuw te verbinden.";
                    StateHasChanged();
                });
            }

            if (_hubConnection.State == HubConnectionState.Disconnected)
            {
                await _hubConnection.StartAsync();
            }

            if (_hubConnection.State != HubConnectionState.Connected)
            {
                return;
            }

            await JoinCurrentChatCoreAsync();
        }
        catch (Exception ex)
        {
            _connectionError = $"Realtime verbinding mislukt: {ex.Message}";
        }
        finally
        {
            _hubConnectionLock.Release();
        }
    }

    private void ProcessIncomingMessage(MessageDto dto)
    {
        if (_chat is null || dto.ChatId != _chat.chatId)
        {
            return;
        }

        if (TryAddMessage(dto))
        {
            StateHasChanged();
        }
    }

    private async Task JoinCurrentChatAfterReconnectAsync()
    {
        await _hubConnectionLock.WaitAsync();
        try
        {
            if (_hubConnection?.State == HubConnectionState.Connected)
            {
                await JoinCurrentChatCoreAsync();
            }
        }
        catch (Exception ex)
        {
            _connectionError = $"Realtime verbinding mislukt: {ex.Message}";
        }
        finally
        {
            _hubConnectionLock.Release();
        }
    }

    private async Task JoinCurrentChatCoreAsync()
    {
        if (_hubConnection is null)
        {
            return;
        }

        if (_chat is null)
        {
            if (_joinedChatId is int previousId)
            {
                await _hubConnection.SendAsync("LeaveChat", previousId);
                _joinedChatId = null;
            }

            return;
        }

        if (_joinedChatId == _chat.chatId)
        {
            return;
        }

        if (_joinedChatId is int oldChatId)
        {
            await _hubConnection.SendAsync("LeaveChat", oldChatId);
        }

        await _hubConnection.SendAsync("JoinChat", _chat.chatId);
        _joinedChatId = _chat.chatId;
        _connectionError = null;

        try
        {
            var status = await _hubConnection.InvokeAsync<AlertStatusDto>("GetAlertStatus", _chat.chatId);
            _alertStatus = status;
        }
        catch
        {
            // Het opvragen van de huidige alertstatus is optioneel; fouten mogen de chat niet blokkeren.
        }

        StateHasChanged();
    }

    private bool TryAddMessage(MessageDto dto)
    {
        if (_chat is null)
        {
            return false;
        }

        if (!_messageIds.Add(dto.Id))
        {
            return false;
        }

        _chat.messages.Add(dto);
        _chat.messages = _chat.messages
            .OrderBy(m => m.Timestamp)
            .ToList();

        var mapped = MapToMessage(dto);
        _messages.Add(mapped);
        _messages.Sort((a, b) => Nullable.Compare(a.Timestamp, b.Timestamp));

        return true;
    }

    private Message MapToMessage(MessageDto dto)
    {
        var isOutgoing = !string.IsNullOrWhiteSpace(_currentAccountId)
            && string.Equals(dto.SenderAccountId, _currentAccountId, StringComparison.Ordinal);

        return new Message(
            dto.Id.ToString(CultureInfo.InvariantCulture),
            dto.Content,
            isOutgoing,
            AvatarUrl: null,
            Timestamp: dto.Timestamp,
            AudioUrl: null,
            AudioDuration: null,
            SenderName: dto.SenderName);
    }

    private string GetChatTitle()
    {
        if (_chat is null)
        {
            return _currentUserName ?? "Chat";
        }

        var participantNames = _chat.messages
            .Where(m => !string.IsNullOrWhiteSpace(m.SenderName)
                        && !string.Equals(m.SenderAccountId, _currentAccountId, StringComparison.Ordinal))
            .Select(m => m.SenderName)
            .Distinct(StringComparer.OrdinalIgnoreCase)
            .ToList();

        if (participantNames.Count == 0)
        {
            return !string.IsNullOrWhiteSpace(_currentUserName)
                ? _currentUserName!
                : $"Chat {_chat.chatId}";
        }

        return participantNames.Count == 1
            ? participantNames[0]
            : string.Join(", ", participantNames);
    }

    private string GetAvatarUrl()
    {
        return "https://i.pravatar.cc/64";
    }

    private string GetStatusText()
    {
        var lastMessage = _messages.LastOrDefault();
        if (lastMessage?.Timestamp is DateTimeOffset timestamp)
        {
            return $"Laatste bericht {timestamp.ToLocalTime():HH:mm}";
        }

        return "Online";
    }

    private string GetConversationDateLabel()
    {
        if (_chat is null)
        {
            return string.Empty;
        }

        var first = _chat.messages
            .OrderBy(m => m.Timestamp)
            .FirstOrDefault();

        return first?.Timestamp.ToLocalTime().ToString("d MMM yyyy", CultureInfo.GetCultureInfo("nl-BE")) ?? string.Empty;
    }

    private Task NavigateBack()
    {
        NavigationManager.NavigateTo("/homepage");
        return Task.CompletedTask;
    }

    private async Task TriggerAlert()
    {
        if (_chat is null)
        {
            return;
        }

        if (_isAlertRequestPending)
        {
            return;
        }

        _alertError = null;

        if (_hubConnection is null || _hubConnection.State != HubConnectionState.Connected)
        {
            await EnsureHubConnectionAsync();
        }

        if (_hubConnection is null || _hubConnection.State != HubConnectionState.Connected)
        {
            _alertError = "Alarm kon niet worden geactiveerd. Controleer de realtime verbinding en probeer opnieuw.";
            StateHasChanged();
            return;
        }

        var isActive = _alertStatus?.IsActive ?? false;

        _isAlertRequestPending = true;
        try
        {
            await _hubConnection.SendAsync("SetAlertState", _chat.chatId, !isActive);
        }
        catch (Exception ex)
        {
            _alertError = $"Alarm kon niet worden bijgewerkt: {ex.Message}";
        }
        finally
        {
            _isAlertRequestPending = false;
            StateHasChanged();
        }
    }

    private void HandleAlertStateChanged(AlertStatusDto dto)
    {
        if (_chat is null || dto.ChatId != _chat.chatId)
        {
            return;
        }

        _alertStatus = dto;
        _alertError = null;
        StateHasChanged();
    }

    private string GetAlertMetaText()
    {
        if (_alertStatus is not { IsActive: true })
        {
            return string.Empty;
        }

        var updatedBy = string.IsNullOrWhiteSpace(_alertStatus.UpdatedBy)
            ? "een supervisor"
            : _alertStatus.UpdatedBy;

        var formattedDate = _alertStatus.UpdatedAt.ToLocalTime()
            .ToString("d MMM yyyy HH:mm", CultureInfo.GetCultureInfo("nl-BE"));

        return $"Geactiveerd door {updatedBy} op {formattedDate}.";
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }

        _hubConnectionLock.Dispose();
    }
}
