@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@using Rise.Client.Shared
@using Rise.Services
@inject WoordFilter Filter
@inject NavigationManager Nav
@layout ChatLayout
@implements IAsyncDisposable
<ChatHeader DisplayName="Helena"
            AvatarUrl="https://i.pravatar.cc/64?img=12"
            StatusText="Online 11 minuten geleden"
            OnBack="GoBack"
            OnAlert="TriggerAlert" />

<MessageList Messages="@_messages" TimestampText="Nov 30, 2023, 9:41 AM" />

<SuggestionChips Suggestions="@_suggestions" OnPick="InsertSuggestion" />

<ChatInput @bind-Value="_draft" OnSend="SendAsync" OnSendVoice="SendVoiceAsync" />

@code {
    private readonly List<Message> _messages = new();
    private readonly object _messageSync = new();
    private readonly object _messageIdSync = new();
    private readonly HashSet<string> _processedMessageIds = new();

    private readonly string[] _suggestions =
    [
        "Hey! Hoe gaat het vandaag?",
        "Wat heb je gedaan vandaag?",
        "Zullen we later bellen?",
        "Heb je plannen voor dit weekend?",
        "Ik ben trots op je! ðŸ’ª",
        "Wil je samen een spelletje spelen?"
    ];

    private HubConnection? _hubConnection;
    private const int MaxSignalRPayloadBytes = 10 * 1024 * 1024;
    private const string CurrentUser = "Helena";
    private const string RemoteAvatarUrl = "https://i.pravatar.cc/64?img=12";
    private string _draft = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var hubUrl = new Uri(new Uri(Nav.BaseUri), "chathub");

        _hubConnection = new HubConnectionBuilder()
            .AddJsonProtocol(options =>
            {
                options.PayloadSerializerOptions.DefaultBufferSize = MaxSignalRPayloadBytes; // allow sizeable voice clips
            })
            .WithUrl(hubUrl)
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<string, string, string>("ReceiveMessage", (messageId, user, message) =>
        {
            if (!TryRegisterMessage(messageId))
            {
                return;
            }

            var isOutgoing = string.Equals(user, CurrentUser, StringComparison.OrdinalIgnoreCase);

            lock (_messageSync)
            {
                _messages.Add(new Message(messageId, message, isOutgoing,
                    isOutgoing ? null : RemoteAvatarUrl,
                    DateTimeOffset.Now));
            }

            InvokeAsync(StateHasChanged);
        });

        _hubConnection.On<string, string, string, double>("ReceiveVoiceMessage", (messageId, user, dataUrl, durationSeconds) =>
        {
            if (!TryRegisterMessage(messageId))
            {
                return;
            }

            var isOutgoing = string.Equals(user, CurrentUser, StringComparison.OrdinalIgnoreCase);
            TimeSpan? duration = double.IsFinite(durationSeconds) && durationSeconds > 0
                ? TimeSpan.FromSeconds(durationSeconds)
                : null;

            lock (_messageSync)
            {
                _messages.Add(new Message(messageId, string.Empty, isOutgoing,
                    isOutgoing ? null : RemoteAvatarUrl,
                    DateTimeOffset.Now,
                    dataUrl,
                    duration));
            }

            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
    }

    private Task GoBack()
    {
        Nav.NavigateTo("/");
        return Task.CompletedTask;
    }

    private Task TriggerAlert()
    {
        Console.WriteLine("Alert clicked");
        return Task.CompletedTask;
    }

    private void InsertSuggestion(string text)
    {
        _draft = text;
        StateHasChanged();
    }

    private async Task SendAsync(string text)
    {
        if (_hubConnection is null || string.IsNullOrWhiteSpace(text))
        {
            return;
        }

        var censored = Filter.Censor(text);
        var messageId = Guid.NewGuid().ToString("N");

        RegisterLocalMessage(new Message(
            messageId,
            censored,
            true,
            null,
            DateTimeOffset.Now));

        try
        {
            await _hubConnection.SendAsync("SendMessage", messageId, CurrentUser, censored);
            _draft = string.Empty;
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Failed to send text message: {ex}");
            RemoveLocalMessage(messageId);
            _draft = censored;
            StateHasChanged();
        }
    }

    private async Task SendVoiceAsync(RecordedAudio audio)
    {
        if (_hubConnection is null || string.IsNullOrWhiteSpace(audio.DataUrl))
        {
            return;
        }

        var messageId = Guid.NewGuid().ToString("N");
        var duration = double.IsFinite(audio.DurationSeconds) && audio.DurationSeconds > 0
            ? TimeSpan.FromSeconds(audio.DurationSeconds)
            : null;

        RegisterLocalMessage(new Message(
            messageId,
            string.Empty,
            true,
            null,
            DateTimeOffset.Now,
            audio.DataUrl,
            duration));

        try
        {
            await _hubConnection.SendAsync("SendVoiceMessage", messageId, CurrentUser, audio.DataUrl, audio.DurationSeconds);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Failed to send voice message: {ex}");
            RemoveLocalMessage(messageId);
        }
    }

    private void RegisterLocalMessage(Message message)
    {
        if (!TryRegisterMessage(message.Id))
        {
            return;
        }

        lock (_messageSync)
        {
            _messages.Add(message);
        }
        StateHasChanged();
    }

    private void RemoveLocalMessage(string messageId)
    {
        if (string.IsNullOrWhiteSpace(messageId))
        {
            return;
        }

        bool messageIdRemoved;
        lock (_messageIdSync)
        {
            messageIdRemoved = _processedMessageIds.Remove(messageId);
        }

        if (!messageIdRemoved)
        {
            return;
        }

        bool removed = false;
        lock (_messageSync)
        {
            var index = _messages.FindIndex(m => string.Equals(m.Id, messageId, StringComparison.Ordinal));
            if (index >= 0)
            {
                _messages.RemoveAt(index);
                removed = true;
            }
        }

        if (removed)
        {
            StateHasChanged();
        }
    }

    private bool TryRegisterMessage(string messageId)
    {
        if (string.IsNullOrWhiteSpace(messageId))
        {
            return false;
        }

        lock (_messageIdSync)
        {
            return _processedMessageIds.Add(messageId);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
