@page "/FriendProfilePage/{id:guid}"
@layout EmptyLayout
@using Rise.Client.UserConnections.Components.FriendProfile
@using Rise.Shared.Assets
@using Rise.Shared.Users
@using Rise.Shared.UserConnections
@inject NavigationManager NavigationManager

@if (user is null)
{
    <!-- ðŸ‘‡ Loading state -->
    <div class="flex min-h-screen items-center justify-center bg-neutral-100 text-neutral-600 animate-pulse">
        <p>Profiel wordt geladen...</p>
    </div>
}
else if (user?.User is null)
{
    <!-- ðŸ‘‡ User not found -->
    <div class="flex min-h-screen items-center justify-center bg-neutral-100 text-neutral-600">
        <p>Gebruiker niet gevonden.</p>
    </div>
}
else
{
    <!-- ðŸ‘‡ Main content (alleen renderen als user is geladen) -->
    <main class="relative flex min-h-screen flex-col bg-gradient-to-br from-emerald-50 via-white to-neutral-100 text-neutral-900">
        <BackButton />

        <div class="relative mx-auto flex w-full max-w-6xl flex-1 flex-col gap-6 px-4 pb-8 pt-24 sm:px-6 lg:flex-row lg:gap-10 lg:px-10">
            <section class="relative flex-1 overflow-hidden rounded-3xl bg-neutral-900 shadow-xl">
                <ProfileImageComponent ImgSource="@user.User.AvatarUrl" />
                <BlurComponent />

                <div class="absolute inset-x-0 bottom-0 space-y-4 p-6 sm:p-8">
                    <NameAndBadgesComponent
                        Name="@user.User.Name"
                        Age="@DisplayAge"
                        Gender="@DisplayGender"
                        Organisation="@DisplayOrganisation" />
                </div>
            </section>

            <section class="flex flex-1 flex-col gap-6 pb-10">
                <DescriptionComponent Description="@ProfileDescription" PlusKnop="@(PageContext == UserConnectionTypeDto.AddFriends)" />

                @if (DisplayHobbies.Count > 0)
                {
                    <EmojiComponent Hobbies="@DisplayHobbies" />
                }
            </section>
        </div>
    </main>
}

@code {
    [Parameter] public Guid id { get; set; }

    [CascadingParameter] public UserDto.CurrentUser? CurrentUser { get; set; }

    [Inject] private IUserService UserService { get; set; } = default!;

    private UserResponse.CurrentUser? user;
    private UserConnectionTypeDto PageContext = UserConnectionTypeDto.Friend;

    private static readonly string DefaultDescription = "Lief, eerlijk en altijd mezelf ðŸ’› Heb een mentale beperking, maar een groot hart en een brede glimlach ðŸ™‚";
    private const string DefaultOrganisation = "Organisatie";

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"Ontvangen id: {id}");

        // ðŸ”¹ Haal querystring op en parse 'context' handmatig
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("context", out var contextValue))
        {
            if (Enum.TryParse<UserConnectionTypeDto>(contextValue, true, out var result))
            {
                PageContext = result;
            }
        }

        user = await UserService.GetUserAsync(id.ToString());

        if (user is null)
        {
            Console.WriteLine("Gebruiker niet gevonden!");
        }
    }

    private string ProfileDescription
        => string.IsNullOrWhiteSpace(user?.User?.Biography) ? DefaultDescription : user!.User.Biography;

    private IReadOnlyList<HobbyDto.Get> DisplayHobbies
        => user?.User?.Hobbies?.Count > 0 ? user.User.Hobbies : DefaultHobbies;

    private static readonly IReadOnlyList<HobbyDto.Get> DefaultHobbies =
        new List<HobbyDto.Get>
        {
            new() { Hobby = HobbyTypeDto.Basketball },
            new() { Hobby = HobbyTypeDto.Rugby },
            new() { Hobby = HobbyTypeDto.Football },
        };

    private string? DisplayAge
    {
        get
        {
            if (user?.User is not { BirthDay: var birthDay })
            {
                return null;
            }

            var today = DateOnly.FromDateTime(DateTime.Today);
            var age = today.Year - birthDay.Year - (today.DayOfYear < birthDay.DayOfYear ? 1 : 0);
            return age > 0 ? $"{age} jaar" : null;
        }
    }

    private string? DisplayGender
        => string.IsNullOrWhiteSpace(user?.User?.Gender) ? null : user.User.Gender;

    private string? DisplayOrganisation => DefaultOrganisation;
}
