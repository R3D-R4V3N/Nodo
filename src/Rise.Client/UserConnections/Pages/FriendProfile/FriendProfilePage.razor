@page "/FriendProfilePage/{id:guid}"
@layout EmptyLayout
@using Rise.Client.Profile.Models
@using Rise.Client.UserConnections.Components.FriendProfile
@using Rise.Shared.Assets
@using Rise.Shared.Users
@using Rise.Shared.UserConnections
@inject NavigationManager NavigationManager

@if (user is null)
{
    <div class="flex h-screen items-center justify-center bg-neutral-50 text-neutral-600 animate-pulse">
        <p>Profiel wordt geladen...</p>
    </div>
}
else if (user?.User is null)
{
    <div class="flex h-screen items-center justify-center bg-neutral-50 text-neutral-600">
        <p>Gebruiker niet gevonden.</p>
    </div>
}
else
{
    <div class="relative min-h-screen bg-neutral-50 text-neutral-900 antialiased">
        <BackButton />

        <section class="relative h-[320px] w-full overflow-hidden sm:h-[380px] md:h-[460px]">
            <ProfileImageComponent ImgSource="@user.User.AvatarUrl" />
            <div class="absolute inset-0 bg-gradient-to-b from-neutral-950/15 via-neutral-950/35 to-neutral-950/55 md:bg-gradient-to-r md:from-neutral-950/20 md:via-neutral-950/35 md:to-neutral-900/10"></div>

            <div class="absolute inset-x-0 bottom-0 px-4 pb-10 sm:px-6 md:inset-y-0 md:flex md:items-center md:px-12">
                <NameAndBadgesComponent
                    Name="@user.User.Name"
                    Age="@AgeLabel"
                    Gender="@user.User.Gender.ToString()" />
            </div>
        </section>

        <main class="relative z-10 mx-auto -mt-10 w-full max-w-3xl space-y-8 px-4 pb-16 sm:-mt-12 sm:px-6 md:-mt-16">
            <DescriptionComponent
                FirstName="@user.User.FirstName"
                PlusKnop="@(PageContext == UserConnectionTypeDto.AddFriends)"
                Description="@user.User.Biography" />

            <FriendHobbiesSection
                FirstName="@user.User.FirstName"
                Hobbies="@ProfileHobbies" />
        </main>
    </div>
}

@code {
    [Parameter] public Guid id { get; set; } 

    [CascadingParameter] public UserDto.CurrentUser? CurrentUser { get; set; }

    [Inject] private IUserService UserService { get; set; } = default!;

    private UserResponse.CurrentUser? user;
    private UserConnectionTypeDto PageContext = UserConnectionTypeDto.Friend;

    private IReadOnlyList<ProfileHobbyModel> ProfileHobbies { get; set; } = Array.Empty<ProfileHobbyModel>();

    private string AgeLabel => user?.User is null ? string.Empty : $"{CalculateAge(user.User.BirthDay)} jaar";

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"Ontvangen id: {id}");

        // ðŸ”¹ Haal querystring op en parse 'context' handmatig
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("context", out var contextValue))
        {
            if (Enum.TryParse<UserConnectionTypeDto>(contextValue, true, out var result))
            {
                PageContext = result;
            }
        }

        user = await UserService.GetUserAsync(id.ToString());

        if (user is null)
        {
            Console.WriteLine("Gebruiker niet gevonden!");
        }
        ProfileHobbies = user.User.Hobbies
            .Select(h => new ProfileHobbyModel(h.Hobby.ToString(), h.Name, h.Emoji))
            .ToList();
        
        Console.WriteLine($"Aantal hobby's: {user.User.Hobbies.Count}");
        foreach (var h in user.User.Hobbies)
        {
            Console.WriteLine($"Hobby: {h.Name}, Emoji: {h.Emoji}, Id: {h.Hobby.ToString()}");
        }

    }

    private static int CalculateAge(System.DateOnly birthDay)
    {
        var today = System.DateOnly.FromDateTime(System.DateTime.Today);
        var age = today.Year - birthDay.Year;

        if (today < birthDay.AddYears(age))
        {
            age--;
        }

        return age;
    }
}
