@using System.Linq
@using Rise.Client.Profile.Models

<div class="@(IsOpen ? "fixed" : "hidden") inset-0 z-50" aria-hidden="@(IsOpen ? "false" : "true")">
    <div class="absolute inset-0 bg-black/40 backdrop-blur-[1px]" role="presentation" @onclick="HandleClose"></div>

    <section class="absolute inset-x-0 bottom-0 max-h-[85vh] rounded-t-3xl bg-white shadow-2xl transition-transform duration-300 @(IsOpen ? "translate-y-0" : "translate-y-full")" role="dialog" aria-modal="true">
        <div class="flex justify-center pt-3">
            <div class="h-1.5 w-12 rounded-full bg-neutral-200"></div>
        </div>

        <div class="px-4 pt-2 pb-3 sm:px-6">
            <div class="flex items-center justify-between gap-3">
                <h2 class="text-lg font-semibold">Kies je hobby's</h2>
                <button type="button" class="rounded-full p-2 text-neutral-500 hover:bg-neutral-100" @onclick="HandleClose" aria-label="Sluiten">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>

            <div class="mt-3">
                <label class="sr-only" for="hobby-search">Zoek hobby</label>
                <div class="flex items-center gap-2 rounded-2xl border border-neutral-200 bg-neutral-50 px-3 py-2">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-neutral-500" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M12.9 14.32a8 8 0 111.414-1.414l3.387 3.387a1 1 0 01-1.414 1.414l-3.387-3.387zM14 8a6 6 0 11-12 0 6 6 0 0112 0z" clip-rule="evenodd" />
                    </svg>
                    <input id="hobby-search" value="@SearchText" @oninput="HandleSearch" type="search" inputmode="search" autocomplete="off" placeholder="Zoek bv. voetbal…" class="w-full bg-transparent text-[15px] placeholder:text-neutral-400 focus:outline-none" />
                    @if (!string.IsNullOrWhiteSpace(SearchText))
                    {
                        <button type="button" class="inline-flex items-center gap-1 text-sm text-neutral-500 hover:text-neutral-700" @onclick="ClearSearch">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                            <span>Wis</span>
                        </button>
                    }
                </div>
            </div>
        </div>

        <div class="px-4 pb-3 sm:px-6">
            <div class="grid grid-cols-3 gap-3 overflow-y-auto overscroll-contain touch-scroll pb-24 max-h-[50vh] sm:max-h-[55vh] pt-1 px-1" role="listbox" aria-multiselectable="true">
                @foreach (var hobby in FilteredHobbies)
                {
                    var isSelected = IsSelected(hobby.Id);
                    var isLocked = !isSelected && SelectedCount >= MaxSelection;
                    <button type="button" class="group relative rounded-2xl border @(isSelected ? "ring-2 ring-emerald-600 bg-emerald-50 border-emerald-200" : "border-neutral-200 bg-white") px-2 py-3 text-center shadow-sm focus:outline-none focus:ring-2 focus:ring-emerald-600 disabled:opacity-40 disabled:cursor-not-allowed" role="option" aria-selected="@isSelected" disabled="@isLocked" @onclick="() => HandleToggle(hobby.Id)">
                        <span class="block text-2xl leading-none mb-1">@hobby.Emoji</span>
                        <span class="block text-[13px] font-medium text-neutral-800">@hobby.Name</span>
                        @if (isSelected)
                        {
                            <span class="absolute -top-1 -right-1 h-5 w-5 rounded-full bg-emerald-600 text-white grid place-items-center text-[11px]">✓</span>
                        }
                    </button>
                }
            </div>
        </div>

        <div class="pointer-events-auto sticky bottom-0 inset-x-0 bg-white/95 backdrop-blur px-4 py-3 sm:px-6 border-t">
            <div class="flex items-center justify-between">
                <p class="text-sm text-neutral-600">Geselecteerd: <span class="font-medium">@SelectedCount/@MaxSelection</span></p>
                <div class="flex items-center gap-2">
                    <button type="button" class="rounded-xl border border-[#127646] text-[#127646] px-4 py-3 text-sm font-medium hover:bg-[#127646] hover:text-white inline-flex items-center gap-2" @onclick="HandleClear">
                        <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 3h6a1 1 0 0 1 1 1v2h3M6 6h12l-.87 12.14A2 2 0 0 1 15.14 20H8.86a2 2 0 0 1-1.99-1.86L6 6m3 0V4a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v2M10 11v6m4-6v6" />
                        </svg>
                        <span>Leegmaken</span>
                    </button>
                    <button type="button" class="rounded-xl bg-[#127646] px-4 py-3 text-sm font-medium text-white shadow hover:bg-[#0f663c] disabled:opacity-40 disabled:cursor-not-allowed inline-flex items-center gap-2" disabled="@(SelectedCount == 0)" @onclick="HandleConfirm">
                        <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="currentColor" viewBox="0 0 256 256">
                            <path d="M216.49,79.51l-112,112a12,12,0,0,1-17,0l-48-48a12,12,0,0,1,17-17L96,166l103-103a12,12,0,0,1,17,17Z" />
                        </svg>
                        <span>Bewaar</span>
                    </button>
                </div>
            </div>
        </div>
    </section>
</div>

@code {
    [Parameter] public IReadOnlyList<HobbyOption> Interests { get; set; } = Array.Empty<HobbyOption>();
    [Parameter] public IReadOnlyCollection<string> Selection { get; set; } = Array.Empty<string>();
    [Parameter] public string SearchText { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> SearchTextChanged { get; set; }
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<string> OnToggle { get; set; }
    [Parameter] public EventCallback OnClear { get; set; }
    [Parameter] public EventCallback OnConfirm { get; set; }
    [Parameter] public int MaxSelection { get; set; }

    private HashSet<string> _selectionLookup = new();

    private IEnumerable<HobbyOption> FilteredHobbies => string.IsNullOrWhiteSpace(SearchText)
        ? Interests
        : Interests.Where(i => i.Name.Contains(SearchText, StringComparison.OrdinalIgnoreCase));

    private int SelectedCount => Selection.Count;

    protected override void OnParametersSet()
    {
        _selectionLookup = Selection is HashSet<string> set ? new HashSet<string>(set) : Selection.ToHashSet();
    }

    private bool IsSelected(string id) => _selectionLookup.Contains(id);

    private Task HandleClose() => OnClose.InvokeAsync();
    private Task HandleToggle(string id) => OnToggle.InvokeAsync(id);
    private Task HandleClear() => OnClear.InvokeAsync();
    private Task HandleConfirm() => OnConfirm.InvokeAsync();

    private Task HandleSearch(ChangeEventArgs args)
    {
        var value = args.Value?.ToString() ?? string.Empty;
        return SearchTextChanged.InvokeAsync(value);
    }

    private Task ClearSearch() => SearchTextChanged.InvokeAsync(string.Empty);
}
