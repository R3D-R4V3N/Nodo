@using System.Linq
@using Microsoft.AspNetCore.Components.Web
@using Rise.Client.Profile.Models

<div class="@(IsOpen ? "fixed" : "hidden") inset-0 z-50" aria-hidden="@(IsOpen ? "false" : "true")">
    <div class="absolute inset-0 bg-black/40 backdrop-blur-[1px]" role="presentation" @onclick="HandleClose"></div>

    <section class="absolute inset-x-0 bottom-0 max-h-[85vh] rounded-t-3xl bg-white shadow-2xl transition-transform duration-300 @(IsOpen ? "translate-y-0" : "translate-y-full")" role="dialog" aria-modal="true">
        <div class="flex justify-center pt-3">
            <div class="h-1.5 w-12 rounded-full bg-neutral-200"></div>
        </div>

        <div class="px-4 pt-2 pb-3 sm:px-6">
            <div class="flex items-center justify-between gap-3">
                <h2 class="text-lg font-semibold">@Title</h2>
                <button type="button" class="rounded-full p-2 text-neutral-500 hover:bg-neutral-100" @onclick="HandleClose" aria-label="Sluiten">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>

            <div class="mt-3">
                <label class="sr-only" for="preference-search">Zoek voorkeur</label>
                <div class="flex items-center gap-2 rounded-2xl border border-neutral-200 bg-neutral-50 px-3 py-2">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-neutral-500" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M12.9 14.32a8 8 0 111.414-1.414l3.387 3.387a1 1 0 01-1.414 1.414l-3.387-3.387zM14 8a6 6 0 11-12 0 6 6 0 0112 0z" clip-rule="evenodd" />
                    </svg>
                    <input id="preference-search" value="@SearchText" @oninput="HandleSearch" type="search" inputmode="search" autocomplete="off" placeholder="@SearchPlaceholder" class="w-full bg-transparent text-[15px] placeholder:text-neutral-400 focus:outline-none" />
                    @if (!string.IsNullOrWhiteSpace(SearchText))
                    {
                        <button type="button" class="inline-flex items-center gap-1 text-sm text-neutral-500 hover:text-neutral-700" @onclick="ClearSearch">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                            </svg>
                            <span>Wis</span>
                        </button>
                    }
                </div>
            </div>
        </div>

        @if (AllowCustomEntry)
        {
            <div class="px-4 pb-2 ml-1 sm:px-6">
                <label class="text-xs font-medium text-neutral-500" for="custom-preference-input">@CustomEntryLabel</label>
                <div class="mt-1 flex items-start gap-2">
                    <input id="custom-preference-input"
                           class="w-full rounded-2xl border border-neutral-200 bg-white px-3 py-3 text-sm focus:outline-none focus:ring-2 focus:ring-emerald-600"
                           placeholder="@CustomEntryPlaceholder"
                           value="@CustomEntryValue"
                           @oninput="HandleCustomEntryInput"
                           @onkeydown="HandleCustomEntryKeyDown"
                           maxlength="@CustomEntryMaxLengthValue"
                           autocomplete="off" />
                    <button type="button"
                            class="shrink-0 rounded-xl px-4 py-3 text-sm font-medium text-white shadow disabled:opacity-40 disabled:cursor-not-allowed @(PrimaryButtonClass) inline-flex items-center justify-center gap-2"
                            disabled="@(IsCustomEntryBusy || IsCustomEntryDisabled || string.IsNullOrWhiteSpace(CustomEntryValue))"
                            @onclick="HandleAddCustomEntry">
                        <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" fill="currentColor" viewBox="0 0 256 256"><path d="M228,128a12,12,0,0,1-12,12H140v76a12,12,0,0,1-24,0V140H40a12,12,0,0,1,0-24h76V40a12,12,0,0,1,24,0v76h76A12,12,0,0,1,228,128Z"></path></svg>
                        <span>@(IsCustomEntryBusy ? "Toevoegen…" : "Toevoegen")</span>
                    </button>
                </div>
                @if (!string.IsNullOrWhiteSpace(CustomEntryError))
                {
                    <p class="mt-1 text-xs text-red-600">@CustomEntryError</p>
                }
            </div>
        }

        <div class="px-4 pb-3 sm:px-6">
            <div class="grid @(UseSingleColumnLayout ? "grid-cols-1" : "grid-cols-2 sm:grid-cols-2") gap-3 overflow-y-auto overscroll-contain touch-scroll pb-24 max-h-[50vh] sm:max-h-[55vh] pt-1 px-1" role="listbox" aria-multiselectable="true">
                @foreach (var option in FilteredOptions)
                {
                    var isSelected = IsSelected(option.Id);
                    var isLocked = !isSelected && SelectedCount >= MaxSelection;
                    <button type="button" class="group relative rounded-2xl border @(GetOptionClasses(isSelected)) px-3 py-3 text-left text-sm font-medium text-neutral-800 shadow-sm focus:outline-none focus:ring-2 @(GetRingClasses(isSelected)) disabled:opacity-40 disabled:cursor-not-allowed" role="option" aria-selected="@isSelected" disabled="@isLocked" @onclick="() => HandleToggle(option.Id)">
                        <span class="flex items-center gap-2">
                            @if (!string.IsNullOrWhiteSpace(option.Emoji))
                            {
                                <span class="text-lg">@option.Emoji</span>
                            }
                            <span class="block">@option.Name</span>
                        </span>
                        @if (isSelected)
                        {
                            <span class="absolute -top-1 -right-1 h-5 w-5 rounded-full text-white grid place-items-center text-[11px] @(SelectedBadgeClass)">✓</span>
                        }
                    </button>
                }
            </div>
        </div>

        <div class="pointer-events-auto sticky bottom-0 inset-x-0 bg-white/95 backdrop-blur px-4 py-3 sm:px-6 border-t">
            <div class="flex items-center justify-between">
                <p class="text-sm text-neutral-600">Geselecteerd: <span class="font-medium">@SelectedCount/@MaxSelection</span></p>
                <div class="flex items-center gap-2">
                    <button type="button" class="rounded-xl border px-4 py-3 text-sm font-medium @(OutlineButtonClass) inline-flex items-center gap-2" @onclick="HandleClear">
                        <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="currentColor" viewBox="0 0 256 256"><path d="M216,48H176V40a24,24,0,0,0-24-24H104A24,24,0,0,0,80,40v8H40a8,8,0,0,0,0,16h8V208a16,16,0,0,0,16,16H192a16,16,0,0,0,16-16V64h8a8,8,0,0,0,0-16ZM112,168a8,8,0,0,1-16,0V104a8,8,0,0,1,16,0Zm48,0a8,8,0,0,1-16,0V104a8,8,0,0,1,16,0Zm0-120H96V40a8,8,0,0,1,8-8h48a8,8,0,0,1,8,8Z"></path></svg>
                        <span>Leegmaken</span>
                    </button>
                    <button type="button" class="rounded-xl px-4 py-3 text-sm font-medium text-white shadow disabled:opacity-40 disabled:cursor-not-allowed @(PrimaryButtonClass) inline-flex items-center gap-2" disabled="@(SelectedCount == 0)" @onclick="HandleConfirm">
                        <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5" fill="currentColor"  viewBox="0 0 256 256"><path d="M232.49,80.49l-128,128a12,12,0,0,1-17,0l-56-56a12,12,0,1,1,17-17L96,183,215.51,63.51a12,12,0,0,1,17,17Z"></path></svg>
                        <span>Bewaar</span>
                    </button>
                </div>
            </div>
        </div>
    </section>
</div>

@code {
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public string SearchPlaceholder { get; set; } = string.Empty;
    [Parameter] public bool IsOpen { get; set; }
    [Parameter] public bool UseDislikeTheme { get; set; }
    [Parameter] public IReadOnlyList<PreferenceOption> Options { get; set; } = Array.Empty<PreferenceOption>();
    [Parameter] public IReadOnlyCollection<string> Selection { get; set; } = Array.Empty<string>();
    [Parameter] public string SearchText { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> SearchTextChanged { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<string> OnToggle { get; set; }
    [Parameter] public EventCallback OnClear { get; set; }
    [Parameter] public EventCallback OnConfirm { get; set; }
    [Parameter] public int MaxSelection { get; set; }
    [Parameter] public bool UseSingleColumnLayout { get; set; }
    [Parameter] public bool AllowCustomEntry { get; set; }
    [Parameter] public string CustomEntryLabel { get; set; } = string.Empty;
    [Parameter] public string CustomEntryPlaceholder { get; set; } = string.Empty;
    [Parameter] public string CustomEntryValue { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> CustomEntryValueChanged { get; set; }
    [Parameter] public EventCallback<string> OnCreateCustomEntry { get; set; }
    [Parameter] public string CustomEntryError { get; set; } = string.Empty;
    [Parameter] public bool IsCustomEntryBusy { get; set; }
    [Parameter] public bool IsCustomEntryDisabled { get; set; }
    [Parameter] public int CustomEntryMaxLength { get; set; }

    private HashSet<string> _selectionLookup = new(StringComparer.OrdinalIgnoreCase);

    private IEnumerable<PreferenceOption> FilteredOptions => string.IsNullOrWhiteSpace(SearchText)
        ? Options
        : Options.Where(o =>
            o.Name.Contains(SearchText, StringComparison.OrdinalIgnoreCase)
            || o.Label.Contains(SearchText, StringComparison.OrdinalIgnoreCase));

    private int SelectedCount => Selection.Count;

    private string SelectedBadgeClass => UseDislikeTheme ? "bg-rose-500" : "bg-emerald-600";

    private string PrimaryButtonClass => UseDislikeTheme ? "bg-rose-500 hover:bg-rose-600" : "bg-[#127646] hover:bg-[#0f663c]";

    private string OutlineButtonClass => UseDislikeTheme ? "border-rose-500 text-rose-500 hover:bg-rose-50" : "border-[#127646] text-[#127646] hover:bg-[#127646] hover:text-white";

    private int? CustomEntryMaxLengthValue => CustomEntryMaxLength > 0 ? CustomEntryMaxLength : null;

    protected override void OnParametersSet()
    {
        _selectionLookup = Selection is HashSet<string> set
            ? new HashSet<string>(set, StringComparer.OrdinalIgnoreCase)
            : Selection.ToHashSet(StringComparer.OrdinalIgnoreCase);
    }

    private bool IsSelected(string id) => _selectionLookup.Contains(id);

    private string GetOptionClasses(bool isSelected)
        => isSelected
            ? (UseDislikeTheme ? "border-rose-200 bg-rose-50" : "border-emerald-200 bg-emerald-50")
            : "border-neutral-200 bg-white";

    private string GetRingClasses(bool isSelected)
        => isSelected
            ? (UseDislikeTheme ? "ring-rose-500" : "ring-emerald-600")
            : "ring-transparent";

    private Task HandleClose() => OnClose.InvokeAsync();
    private Task HandleToggle(string id) => OnToggle.InvokeAsync(id);
    private Task HandleClear() => OnClear.InvokeAsync();
    private Task HandleConfirm() => OnConfirm.InvokeAsync();

    private Task HandleSearch(ChangeEventArgs args)
    {
        var value = args.Value?.ToString() ?? string.Empty;
        return SearchTextChanged.InvokeAsync(value);
    }

    private Task ClearSearch() => SearchTextChanged.InvokeAsync(string.Empty);

    private Task HandleCustomEntryInput(ChangeEventArgs args)
    {
        var value = args.Value?.ToString() ?? string.Empty;
        return CustomEntryValueChanged.InvokeAsync(value);
    }

    private Task HandleAddCustomEntry()
    {
        if (!OnCreateCustomEntry.HasDelegate || IsCustomEntryBusy || IsCustomEntryDisabled)
        {
            return Task.CompletedTask;
        }

        return OnCreateCustomEntry.InvokeAsync(CustomEntryValue);
    }

    private Task HandleCustomEntryKeyDown(KeyboardEventArgs args)
    {
        if (args.Key is "Enter")
        {
            return HandleAddCustomEntry();
        }

        return Task.CompletedTask;
    }
}
