@using System
@using System.Linq
@using Rise.Client.Profile.Models

<section class="mt-6">
    <h3 class="mb-2 text-sm font-medium text-neutral-700">Interesses &amp; hobby's</h3>
    <div class="space-y-4">
        <div class="rounded-2xl border border-emerald-100 bg-emerald-50 p-4">
            <div class="mb-3 flex items-center justify-between gap-2 text-sm font-semibold text-emerald-700">
                <div class="flex items-center gap-2">
                    <span class="flex h-7 w-7 items-center justify-center rounded-full bg-emerald-100 text-emerald-600">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="h-4 w-4" viewBox="0 0 256 256"><path d="M234,80.12A24,24,0,0,0,216,72H160V56a40,40,0,0,0-40-40,8,8,0,0,0-7.16,4.42L75.06,96H32a16,16,0,0,0-16,16v88a16,16,0,0,0,16,16H204a24,24,0,0,0,23.82-21l12-96A24,24,0,0,0,234,80.12ZM32,112H72v88H32Z"></path></svg>
                    </span>
                    <span>Wat ik leuk vind</span>
                </div>
                @if (IsEditing)
                {
                    <span class="text-xs font-medium text-emerald-700">@Likes.Count/@MaxLikes</span>
                }
            </div>
            <div class="min-h-[36px] flex flex-wrap gap-2">
                @if (Likes.Any())
                {
                    @foreach (var chip in Likes)
                    {
                        <span class="inline-flex items-center gap-2 rounded-full border border-emerald-200 bg-white px-3 py-1 text-sm text-emerald-800 shadow-sm">
                            <span class="font-medium">@chip.Label</span>
                            @if (IsEditing)
                            {
                                <button type="button" class="ml-1 rounded-full p-0.5 text-emerald-600 hover:bg-emerald-100" @onclick="() => HandleRemoveLike(chip.Id)" aria-label='@($"Verwijder {chip.Label}")'>
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                </button>
                            }
                        </span>
                    }
                }
                else if (IsEditing)
                {
                    <span class="text-sm text-emerald-700/80">Kies dingen die je graag hebt.</span>
                }
                else
                {
                    <span class="text-sm text-emerald-700/80">Er zijn nog geen favorieten ingesteld.</span>
                }
            </div>
            @if (IsEditing)
            {
                <button type="button" class="mt-3 w-full rounded-xl bg-[#127646] px-4 py-3 text-sm font-medium text-white shadow hover:bg-[#0f663c] active:scale-[0.99]" @onclick="HandleManageLikes">
                    Kies wat ik leuk vind
                </button>
            }
        </div>

        <div class="rounded-2xl border border-rose-100 bg-rose-50 p-4">
            <div class="mb-3 flex items-center justify-between gap-2 text-sm font-semibold text-rose-600">
                <div class="flex items-center gap-2">
                    <span class="flex h-7 w-7 items-center justify-center rounded-full bg-rose-100 text-rose-500">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="h-4 w-4" viewBox="0 0 256 256"><path d="M239.82,157l-12-96A24,24,0,0,0,204,40H32A16,16,0,0,0,16,56v88a16,16,0,0,0,16,16H75.06l37.78,75.58A8,8,0,0,0,120,240a40,40,0,0,0,40-40V184h56a24,24,0,0,0,23.82-27ZM72,144H32V56H72Z"></path></svg>
                    </span>
                    <span>Wat ik minder leuk vind</span>
                </div>
                @if (IsEditing)
                {
                    <span class="text-xs font-medium text-rose-600">@Dislikes.Count/@MaxDislikes</span>
                }
            </div>
            <div class="min-h-[36px] flex flex-wrap gap-2">
                @if (Dislikes.Any())
                {
                    @foreach (var chip in Dislikes)
                    {
                        <span class="inline-flex items-center gap-2 rounded-full border border-rose-200 bg-white px-3 py-1 text-sm text-rose-700 shadow-sm">
                            <span class="font-medium">@chip.Label</span>
                            @if (IsEditing)
                            {
                                <button type="button" class="ml-1 rounded-full p-0.5 text-rose-500 hover:bg-rose-100" @onclick="() => HandleRemoveDislike(chip.Id)" aria-label='@($"Verwijder {chip.Label}")'>
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                </button>
                            }
                        </span>
                    }
                }
                else if (IsEditing)
                {
                    <span class="text-sm text-rose-600/80">Kies wat je liever vermijdt.</span>
                }
                else
                {
                    <span class="text-sm text-rose-600/80">Er zijn nog geen dingen die je minder leuk vindt.</span>
                }
            </div>
            @if (IsEditing)
            {
                <button type="button" class="mt-3 w-full rounded-xl bg-rose-500 px-4 py-3 text-sm font-medium text-white shadow hover:bg-rose-600 active:scale-[0.99]" @onclick="HandleManageDislikes">
                    Kies wat ik minder leuk vind
                </button>
            }
        </div>

        <div class="rounded-2xl border border-neutral-200 bg-white p-4">
            <div class="mb-3 flex items-center justify-between gap-2 text-sm font-semibold text-neutral-700">
                <div class="flex items-center gap-2">
                    <span class="flex h-7 w-7 items-center justify-center rounded-full bg-neutral-100 text-neutral-500">
                        <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" class="h-4 w-4" viewBox="0 0 256 256"><path d="M234.29,114.85l-45,38.83L203,211.75a16.4,16.4,0,0,1-24.5,17.82L128,198.49,77.47,229.57A16.4,16.4,0,0,1,53,211.75l13.76-58.07-45-38.83A16.46,16.46,0,0,1,31.08,86l59-4.76,22.76-55.08a16.36,16.36,0,0,1,30.27,0l22.75,55.08,59,4.76a16.46,16.46,0,0,1,9.37,28.86Z"></path></svg>
                    </span>
                    <span>Mijn hobby's</span>
                </div>
                @if (IsEditing)
                {
                    <span class="text-xs font-medium text-neutral-500">@Hobbies.Count/@MaxHobbies</span>
                }
            </div>
            <div class="min-h-[36px] flex flex-wrap gap-2">
                @if (Hobbies.Any())
                {
                    @foreach (var hobby in Hobbies)
                    {
                        <span class="inline-flex items-center gap-2 rounded-full border border-neutral-300 bg-white px-3 py-1 text-sm text-neutral-700 shadow-sm">
                            @if (!string.IsNullOrWhiteSpace(hobby.Emoji))
                            {
                                <span class="text-base">@hobby.Emoji</span>
                            }
                            <span class="font-medium">@hobby.Name</span>
                            @if (IsEditing)
                            {
                                <button type="button" class="ml-1 rounded-full p-0.5 text-neutral-500 hover:bg-neutral-100" @onclick="() => HandleRemoveHobby(hobby.Id)" aria-label='@($"Verwijder {hobby.Name}")'>
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                                    </svg>
                                </button>
                            }
                        </span>
                    }
                }
                else if (IsEditing)
                {
                    <span class="text-sm text-neutral-500">Kies hobby's die bij je passen.</span>
                }
                else
                {
                    <span class="text-sm text-neutral-500">Nog geen hobby's geselecteerd.</span>
                }
            </div>
            @if (IsEditing)
            {
                <button type="button" class="mt-3 w-full rounded-xl bg-[#127646] px-4 py-3 text-sm font-medium text-white shadow hover:bg-[#0f663c] active:scale-[0.99]" @onclick="HandleManageHobbies">
                    Wat zijn mijn hobby's
                </button>
            }
        </div>
    </div>
</section>

@code {
    [Parameter] public IReadOnlyList<PreferenceChip> Likes { get; set; } = Array.Empty<PreferenceChip>();
    [Parameter] public IReadOnlyList<PreferenceChip> Dislikes { get; set; } = Array.Empty<PreferenceChip>();
    [Parameter] public IReadOnlyList<ProfileHobbyModel> Hobbies { get; set; } = Array.Empty<ProfileHobbyModel>();
    [Parameter] public bool IsEditing { get; set; }
    [Parameter] public int MaxLikes { get; set; }
    [Parameter] public int MaxDislikes { get; set; }
    [Parameter] public int MaxHobbies { get; set; }
    [Parameter] public EventCallback OnManageLikes { get; set; }
    [Parameter] public EventCallback OnManageDislikes { get; set; }
    [Parameter] public EventCallback OnManageHobbies { get; set; }
    [Parameter] public EventCallback<string> OnRemoveLike { get; set; }
    [Parameter] public EventCallback<string> OnRemoveDislike { get; set; }
    [Parameter] public EventCallback<string> OnRemoveHobby { get; set; }

    private Task HandleManageLikes() => OnManageLikes.InvokeAsync();
    private Task HandleManageDislikes() => OnManageDislikes.InvokeAsync();
    private Task HandleManageHobbies() => OnManageHobbies.InvokeAsync();
    private Task HandleRemoveLike(string id) => OnRemoveLike.InvokeAsync(id);
    private Task HandleRemoveDislike(string id) => OnRemoveDislike.InvokeAsync(id);
    private Task HandleRemoveHobby(string id) => OnRemoveHobby.InvokeAsync(id);
}
